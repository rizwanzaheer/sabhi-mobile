// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Credential renders correctly with data 1`] = `
<View
  pointerEvents="auto"
  style={
    Object {
      "alignItems": undefined,
      "backgroundColor": "#000000",
      "borderRadius": undefined,
      "flex": 1,
      "flexDirection": undefined,
      "height": undefined,
      "justifyContent": undefined,
      "margin": undefined,
      "marginBottom": undefined,
      "marginLeft": undefined,
      "marginRight": undefined,
      "marginTop": undefined,
      "padding": undefined,
      "paddingBottom": undefined,
      "paddingHorizontal": undefined,
      "paddingLeft": undefined,
      "paddingRight": undefined,
      "paddingTop": undefined,
      "width": undefined,
    }
  }
>
  <RCTScrollView
    contentOffset={
      Object {
        "x": NaN,
        "y": 0,
      }
    }
    data={
      Object {
        "claim": Object {
          "Serto ID": Object {
            "children": Array [
              Object {
                "age": 4,
                "name": "Bob",
              },
              Object {
                "age": 9,
                "name": "Alice",
              },
            ],
            "country": "USA",
            "dateOfBirth": "22-01-75",
            "name": "Sarah Adamson",
          },
        },
        "exp": 1579478400,
        "hash": "testHash",
        "iat": 1562769371,
        "iss": "Serto Identity Platform",
        "sub": "did:ethr:0xf3beac30c498d9e26865f34fcaa57dbb935b0d74",
        "type": "Some VC",
        "vc": Array [],
      }
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    snapToAlignment="center"
    stickyHeaderIndices={Array []}
    testID="FLATLIST"
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`Credential renders correctly without data 1`] = `
<View
  pointerEvents="auto"
  style={
    Object {
      "alignItems": undefined,
      "backgroundColor": "#000000",
      "borderRadius": undefined,
      "flex": 1,
      "flexDirection": undefined,
      "height": undefined,
      "justifyContent": undefined,
      "margin": undefined,
      "marginBottom": undefined,
      "marginLeft": undefined,
      "marginRight": undefined,
      "marginTop": undefined,
      "padding": undefined,
      "paddingBottom": undefined,
      "paddingHorizontal": undefined,
      "paddingLeft": undefined,
      "paddingRight": undefined,
      "paddingTop": undefined,
      "width": undefined,
    }
  }
>
  <RCTScrollView
    contentOffset={
      Object {
        "x": 0,
        "y": 0,
      }
    }
    data={null}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    snapToAlignment="center"
    stickyHeaderIndices={Array []}
    testID="FLATLIST"
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`Credential test cancel sharing 1`] = `
<View
  pointerEvents="auto"
  style={
    Object {
      "alignItems": undefined,
      "backgroundColor": "#000000",
      "borderRadius": undefined,
      "flex": 1,
      "flexDirection": undefined,
      "height": undefined,
      "justifyContent": undefined,
      "margin": undefined,
      "marginBottom": undefined,
      "marginLeft": undefined,
      "marginRight": undefined,
      "marginTop": undefined,
      "padding": undefined,
      "paddingBottom": undefined,
      "paddingHorizontal": undefined,
      "paddingLeft": undefined,
      "paddingRight": undefined,
      "paddingTop": undefined,
      "width": undefined,
    }
  }
>
  <RCTScrollView
    contentOffset={
      Object {
        "x": NaN,
        "y": 0,
      }
    }
    data={
      Object {
        "claim": Object {
          "Serto ID": Object {
            "children": Array [
              Object {
                "age": 4,
                "name": "Bob",
              },
              Object {
                "age": 9,
                "name": "Alice",
              },
            ],
            "country": "USA",
            "dateOfBirth": "22-01-75",
            "name": "Sarah Adamson",
          },
        },
        "exp": 1579478400,
        "hash": "testHash",
        "iat": 1562769371,
        "iss": "Serto Identity Platform",
        "sub": "did:ethr:0xf3beac30c498d9e26865f34fcaa57dbb935b0d74",
        "type": "Some VC",
        "vc": Array [],
      }
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    snapToAlignment="center"
    stickyHeaderIndices={Array []}
    testID="FLATLIST"
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`Credential test cancel sharing 2`] = `
<View
  style={
    Array [
      Object {
        "flexDirection": "row",
      },
      Object {
        "marginRight": 5,
      },
    ]
  }
>
  <View
    accessible={true}
    focusable={true}
    hitSlop={
      Object {
        "bottom": 5,
        "left": 5,
        "right": 5,
        "top": 5,
      }
    }
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "opacity": 1,
      }
    }
    testID="CANCEL_BTN"
  >
    <View>
      <Text
        style={
          Array [
            Object {
              "fontSize": 17,
              "marginHorizontal": 10,
            },
            Object {
              "color": "#FFFFFF",
            },
            undefined,
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
</View>
`;

exports[`Credential test done button 1`] = `
<View
  pointerEvents="auto"
  style={
    Object {
      "alignItems": undefined,
      "backgroundColor": "#000000",
      "borderRadius": undefined,
      "flex": 1,
      "flexDirection": undefined,
      "height": undefined,
      "justifyContent": undefined,
      "margin": undefined,
      "marginBottom": undefined,
      "marginLeft": undefined,
      "marginRight": undefined,
      "marginTop": undefined,
      "padding": undefined,
      "paddingBottom": undefined,
      "paddingHorizontal": undefined,
      "paddingLeft": undefined,
      "paddingRight": undefined,
      "paddingTop": undefined,
      "width": undefined,
    }
  }
>
  <RCTScrollView
    contentOffset={
      Object {
        "x": NaN,
        "y": 0,
      }
    }
    data={
      Object {
        "claim": Object {
          "Serto ID": Object {
            "children": Array [
              Object {
                "age": 4,
                "name": "Bob",
              },
              Object {
                "age": 9,
                "name": "Alice",
              },
            ],
            "country": "USA",
            "dateOfBirth": "22-01-75",
            "name": "Sarah Adamson",
          },
        },
        "exp": 1579478400,
        "hash": "testHash",
        "iat": 1562769371,
        "iss": "Serto Identity Platform",
        "sub": "did:ethr:0xf3beac30c498d9e26865f34fcaa57dbb935b0d74",
        "type": "Some VC",
        "vc": Array [],
      }
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    snapToAlignment="center"
    stickyHeaderIndices={Array []}
    testID="FLATLIST"
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`Credential test done button 2`] = `
<View
  style={
    Array [
      Object {
        "flexDirection": "row",
      },
      Object {
        "marginRight": 5,
      },
    ]
  }
>
  <View
    accessible={true}
    focusable={true}
    hitSlop={
      Object {
        "bottom": 5,
        "left": 5,
        "right": 5,
        "top": 5,
      }
    }
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "opacity": 1,
      }
    }
    testID="DONE_BTN"
  >
    <View>
      <Text
        style={
          Array [
            Object {
              "fontSize": 17,
              "marginHorizontal": 10,
            },
            Object {
              "color": "#FFFFFF",
            },
            undefined,
          ]
        }
      >
        Done
      </Text>
    </View>
  </View>
</View>
`;

exports[`Credential test sharing button 1`] = `
<View
  pointerEvents="auto"
  style={
    Object {
      "alignItems": undefined,
      "backgroundColor": "#000000",
      "borderRadius": undefined,
      "flex": 1,
      "flexDirection": undefined,
      "height": undefined,
      "justifyContent": undefined,
      "margin": undefined,
      "marginBottom": undefined,
      "marginLeft": undefined,
      "marginRight": undefined,
      "marginTop": undefined,
      "padding": undefined,
      "paddingBottom": undefined,
      "paddingHorizontal": undefined,
      "paddingLeft": undefined,
      "paddingRight": undefined,
      "paddingTop": undefined,
      "width": undefined,
    }
  }
>
  <RCTScrollView
    contentOffset={
      Object {
        "x": NaN,
        "y": 0,
      }
    }
    data={
      Object {
        "claim": Object {
          "Serto ID": Object {
            "children": Array [
              Object {
                "age": 4,
                "name": "Bob",
              },
              Object {
                "age": 9,
                "name": "Alice",
              },
            ],
            "country": "USA",
            "dateOfBirth": "22-01-75",
            "name": "Sarah Adamson",
          },
        },
        "exp": 1579478400,
        "hash": "testHash",
        "iat": 1562769371,
        "iss": "Serto Identity Platform",
        "sub": "did:ethr:0xf3beac30c498d9e26865f34fcaa57dbb935b0d74",
        "type": "Some VC",
        "vc": Array [],
      }
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={true}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    pagingEnabled={true}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    showsHorizontalScrollIndicator={false}
    snapToAlignment="center"
    stickyHeaderIndices={Array []}
    testID="FLATLIST"
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`Credential test sharing button 2`] = `
<View
  style={
    Array [
      Object {
        "flexDirection": "row",
      },
      Object {
        "marginRight": 5,
      },
    ]
  }
>
  <View
    accessible={true}
    focusable={true}
    hitSlop={
      Object {
        "bottom": 5,
        "left": 5,
        "right": 5,
        "top": 5,
      }
    }
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "justifyContent": "center",
        "opacity": 1,
      }
    }
    testID="SHARE_BTN"
  >
    <View>
      <Text
        style={
          Array [
            Object {
              "fontSize": 17,
              "marginHorizontal": 10,
            },
            Object {
              "color": "#FFFFFF",
            },
            undefined,
          ]
        }
      >
        Share
      </Text>
    </View>
  </View>
</View>
`;
